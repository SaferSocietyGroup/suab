// Code generated by go-bindata.
// sources:
// src/asssets/docker-cmd.sh
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _srcAsssetsDockerCmdSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x92\x4d\x4f\xdb\x40\x10\x86\xef\xfb\x2b\xa6\xc6\x8a\xe0\xb0\x75\xe1\x08\x32\x90\x0f\x37\xb5\x9a\x2a\x55\x93\x48\x1c\x2c\x39\x1b\x7b\x82\x57\x75\xbc\xe9\x7e\xb4\x41\xae\xff\x7b\x27\xc1\x80\x23\xda\xe2\x93\x77\xf6\x9d\x99\x67\xde\xd9\x93\x77\x81\x33\x3a\x58\xc9\x2a\xc0\xea\x27\x98\x82\xb1\x41\x7f\x16\xa5\x8b\x6f\x93\xd0\x3f\x67\xf1\x97\xfe\x38\x4a\xe7\xfd\x71\xe8\x5f\x30\x36\x99\x8e\xd3\x8f\xf1\x24\x0a\x03\xbb\xd9\x06\xda\x55\x5c\x39\xbb\x75\x96\x45\x77\xf1\x3c\x1d\x4e\x47\x51\xe7\xda\x38\xb1\xe2\xb8\x93\x96\x67\x2a\x47\x76\x02\x33\x2b\xb4\x05\x01\xc6\xad\x4c\x81\x65\x09\xa2\xca\x41\x63\x2e\x35\x66\x14\xa7\xc0\x63\x35\xb0\x8a\x54\x6b\x59\x22\x3b\x65\x40\x1f\xee\xb6\x8a\x32\x67\x8b\xfe\x20\x1d\x2c\xe2\xc9\x28\x8d\x47\xe1\xb2\x50\xc6\x56\x62\x83\xcb\x47\x4d\x56\x28\xf0\x06\x4e\x96\x79\x9c\x5f\x82\x7f\x24\xf6\xd8\x41\x93\x39\x5d\x02\xe7\xb9\xb0\x02\xbc\x3a\xf1\xe4\x46\xdc\x63\xe2\x5d\x42\xe2\xf9\xf5\xf3\xa4\x4d\xe2\x35\x1e\xc9\x0c\x01\x54\x76\xff\x53\xa8\x5f\x1c\xb5\x56\x1a\xfc\xfa\xc9\x9c\xa6\x2d\x59\x60\xf6\x9d\xb0\x0f\x33\xbe\x27\xf7\x3a\xbc\xc3\x4f\xd1\xf0\xf3\x74\xd1\x1a\xf3\x6c\x51\xe8\xdf\xbc\x10\xfb\xf5\x3f\x54\x0d\x5c\xd3\xe5\xb1\xaf\xcd\x21\xcf\xa2\xb1\xff\xcb\xe3\xf8\x03\x3e\x40\xaf\x07\xa7\xb4\x20\x42\x82\xab\xb6\xd5\xcd\xdf\x4a\x9e\xbd\xb6\xe6\xd6\xaf\x9f\x16\xdd\xbc\xed\x43\x50\xaa\x7b\xf3\x02\xc6\x73\x08\x68\xcd\x72\x2d\x32\x6b\xf6\x14\x6b\x59\x1d\x85\xb8\x7d\xd8\x22\xac\x09\x73\x87\x59\xdb\xf7\x0e\xbe\x4e\x67\xf3\xb6\x3f\xa7\xb7\x28\xf4\x03\xdc\xd6\x4d\xb7\x0f\x9d\x92\x2b\xc6\xce\xe0\xe2\xba\x77\x0e\xbf\xa9\x1b\x42\x07\x94\xb1\xfd\x53\x83\x65\x26\xec\xeb\x21\x97\xec\x4f\x00\x00\x00\xff\xff\x58\x75\xb5\x67\xe7\x02\x00\x00")

func srcAsssetsDockerCmdShBytes() ([]byte, error) {
	return bindataRead(
		_srcAsssetsDockerCmdSh,
		"src/asssets/docker-cmd.sh",
	)
}

func srcAsssetsDockerCmdSh() (*asset, error) {
	bytes, err := srcAsssetsDockerCmdShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/asssets/docker-cmd.sh", size: 743, mode: os.FileMode(509), modTime: time.Unix(1464236013, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"src/asssets/docker-cmd.sh": srcAsssetsDockerCmdSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"src": &bintree{nil, map[string]*bintree{
		"asssets": &bintree{nil, map[string]*bintree{
			"docker-cmd.sh": &bintree{srcAsssetsDockerCmdSh, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

