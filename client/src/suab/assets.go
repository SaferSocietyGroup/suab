// Code generated by go-bindata.
// sources:
// src/asssets/docker-cmd.sh
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _srcAsssetsDockerCmdSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x52\x4d\x6f\x9b\x40\x10\xbd\xef\xaf\x98\x12\x64\x25\x87\xed\x36\x39\x3a\x22\x89\x3f\xa8\x8b\xea\xca\x55\x6d\x4b\x39\x20\xe1\x35\xac\x03\x2a\x66\xe9\xee\xd0\x3a\xa2\xfc\xf7\x8e\x1d\x92\x60\xb9\x6d\x38\xb1\xb3\xef\xcd\x7b\xfb\x66\xce\xde\x89\xca\x1a\xb1\xce\x0a\xa1\x8a\x9f\x60\x53\xc6\xa6\xb3\x49\xf4\x31\x98\xfa\x9e\xc0\x6d\x29\x4c\x55\x70\x5d\x61\x59\x21\xf3\xef\x83\x45\x34\x9a\x8d\xfd\xce\xb5\xad\xe4\x9a\xab\x5d\x86\x3c\xd6\x89\x62\x67\x30\x47\x69\x10\x24\xd8\x6a\x6d\x53\x95\xe7\x20\x8b\x04\x8c\x4a\x32\xa3\x62\xaa\x53\xe1\xa9\x1b\xa0\x26\xd4\x26\xcb\x15\x3b\x67\x40\x9f\xda\x95\x9a\x98\xf3\xe5\x60\x18\x0d\x97\xc1\x74\x1c\x05\x63\x6f\x95\x6a\x8b\x85\xdc\xaa\x55\x17\x33\x1c\xcc\xfd\x68\xf9\x6d\xea\xa5\x88\x65\x5f\x08\xf7\x52\xac\xab\x2c\x4f\x84\x7b\xc4\xee\x52\x82\x2f\x83\x89\x1f\x2d\x06\x13\xcf\xbd\x7a\xaa\xc7\xa9\x06\x67\xb8\xa7\x05\x49\x1f\x8e\x99\x0e\x3b\x60\xe2\xca\xe4\xc0\x79\x22\x51\x82\x53\x87\x4e\xb6\x95\x0f\x2a\x74\xfa\x10\x3a\x6e\xfd\xd2\xb1\x09\x9d\xc6\x21\x98\xa5\xb7\x14\xb8\xff\x49\xf5\x2f\xae\x8c\xd1\x06\xdc\xfa\xd9\x6b\xd3\xb6\x4c\x55\xfc\x9d\x12\x38\xc4\xf5\x9e\xe2\xee\x78\x1c\x7d\xf2\x47\x9f\x67\xcb\x36\xe3\x97\xb4\x3d\xf7\xf6\xd5\xb1\x5b\xff\x03\xd5\xc0\x0d\x5d\x1e\x8f\xa8\x39\xf0\x50\x59\xfc\x1f\x8f\xab\x1f\xf0\x01\x7a\x3d\x38\xa7\x59\x93\x25\xb8\x6e\xa5\x6e\xff\xd6\xf2\xe2\x34\x9a\x3b\xb7\x7e\xde\x99\xe6\xed\x1c\x44\xae\x1f\xec\xab\x31\x9e\x80\xa0\x8d\xc9\x36\x32\x46\xbb\x77\xb1\xc9\x8a\xa3\x12\xc7\xc7\x52\xc1\x86\x6c\xee\x54\xdc\xea\xde\xc3\xd7\xd9\x7c\xd1\xea\x73\x5a\x5e\x69\x1e\xe1\xae\x6e\xba\x3a\x74\x0a\xaf\x19\xbb\x80\xab\x9b\xde\x25\xfc\x26\x35\x05\x1d\xa3\x8c\xed\xb7\x16\x56\xb1\xc4\xd3\x47\xae\xd8\x9f\x00\x00\x00\xff\xff\x97\x86\x3e\x77\x18\x03\x00\x00")

func srcAsssetsDockerCmdShBytes() ([]byte, error) {
	return bindataRead(
		_srcAsssetsDockerCmdSh,
		"src/asssets/docker-cmd.sh",
	)
}

func srcAsssetsDockerCmdSh() (*asset, error) {
	bytes, err := srcAsssetsDockerCmdShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/asssets/docker-cmd.sh", size: 792, mode: os.FileMode(509), modTime: time.Unix(1465282632, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"src/asssets/docker-cmd.sh": srcAsssetsDockerCmdSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"src": &bintree{nil, map[string]*bintree{
		"asssets": &bintree{nil, map[string]*bintree{
			"docker-cmd.sh": &bintree{srcAsssetsDockerCmdSh, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

